{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"cppsnippet": {
		"prefix": "snp",
		"body": [

"// AAA000 - Q
"// rnd
"// SHOULD?
"
"#include <iostream>
"#include <vector>
"#include <algorithm>
"#include <set>
"#include <map>
"#include <string>
"#include <cmath>
"#include <ctime>
"#include <functional>
"#include <stack>
"#include <queue>
"#include <tuple>
"#include <cassert>
"#include <bitset>
"
"
"#define rep(i,n)                for (int i = 0; i < n; i++)
"#define repe(i,n)               for (int i = 0; i <= n; i++)
"#define rrep(i,n)               for (int i = n; i > 0; i--)
"#define rrepe(i,n)              for (int i = n; i >= 0; i--)
"#define vrep(X)                 for (auto&& x : X)
"
"#define vvii(X,n1,n2)            vector<vector<int>> X(n1,vector<int>(n2))
"#define vvllll(X,n1,n2)         vector<vector<long long int>> X(n1,vector<long long int>(n2))
"
"#define vpii(X)                 vector<pair<int, int>> X
"#define vpss(X)                 vector<pair<string, string>> X
"#define vpcc(X)                 vector<pair<char, char>> X
"#define vpis(X)                 vector<pair<int, string>> X
"#define vpic(X)                 vector<pair<int, char>> X
"#define vpsi(X)                 vector<pair<string, int>> X
"#define vpsc(X)                 vector<pair<string, char>> X
"#define vpci(X)                 vector<pair<char, int>> X
"#define vpcs(X)                 vector<pair<char, string>> X
"#define vint(X)                 vector<int> X
"#define vchar(X)                vector<string> X
"#define vstring(X)              vector<char> X
"
"#define bgen(X)                 begin(X), end(X)
"#define coutd(X)                cout << X << endl
"
"
"using namespace std;
"
"int main() {
"    
"    
"    
"    
"    return 0;
"    
"}
]
	}
}